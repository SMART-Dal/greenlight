["tensorflow.io.TFRecordWriter()", "tensorflow.train.Example()", "tensorflow.io.TFRecordWriter.write()", "tensorflow.io.TFRecordWriter.close()", "tensorflow.get_logger()", "tensorflow.get_logger.setLevel()", "tensorflow.compat.v1.placeholder()", "tensorflow.compat.v1.saved_model.simple_save()", "tensorflow.compat.v1.keras.models.Sequential()", "tensorflow.compat.v1.keras.models.Sequential.save()", "tensorflow.compat.v1.lite.TFLiteConverter.from_saved_model.convert()", "tensorflow.lite.TFLiteConverter.from_saved_model()", "tensorflow.lite.TFLiteConverter.from_saved_model.convert()", "tensorflow.compat.v1.lite.TFLiteConverter.from_keras_model_file()", "tensorflow.keras.models.load_model()", "tensorflow.compat.v1.lite.TFLiteConverter.from_frozen_graph()", "tensorflow.compat.v1.lite.TFLiteConverter.from_frozen_graph.convert()", "tensorflow.compat.v1.GraphDef()", "tensorflow.compat.v1.GraphDef.ParseFromString()", "tensorflow.graph_util.import_graph_def()", "tensorflow.compat.v1.lite.TFLiteConverter.from_saved_model()", "tensorflow.keras.models.load_model.save()", "tensorflow.Variable()", "tensorflow.Variable.assign()", "tensorflow.constant()", "tensorflow.matmul()", "tensorflow.concat()", "tensorflow.nn.softmax()", "tensorflow.reduce_sum()", "tensorflow.convert_to_tensor()", "tensorflow.Variable()", "tensorflow.Variable.assign()", "tensorflow.Variable.assign_add()", "tensorflow.constant()", "tensorflow.Module.multiply()", "tensorflow.saved_model.save()", "tensorflow.saved_model.load()", "tensorflow.saved_model.load.multiply()", "tensorflow.linspace()", "tensorflow.cast()", "tensorflow.random.uniform()", "tensorflow.data.Dataset.from_tensor_slices()", "tensorflow.data.Dataset.from_tensor_slices.shuffle(buffer_size=x.shape[0]).batch()", "tensorflow.keras.Sequential()", "tensorflow.keras.Sequential.compile()", "tensorflow.keras.Sequential.save()", "tensorflow.Variable()", "tensorflow.Module()", "tensorflow.train.Checkpoint()", "tensorflow.train.list_variables()", "tensorflow.train.Checkpoint.restore()", "tensorflow.summary.create_file_writer()", "tensorflow.summary.trace_on()", "tensorflow.summary.trace_export()", "tensorflow.saved_model.save()", "tensorflow.saved_model.load()", "tensorflow.keras.layers.Layer()", "tensorflow.train.Checkpoint.write()", "tensorflow.keras.Sequential.compile()", "tensorflow.config.list_physical_devices()", "tensorflow.config.experimental.set_virtual_device_configuration()", "tensorflow.random.get_global_generator()", "tensorflow.random.Generator.from_seed()", "tensorflow.random.Generator.from_non_deterministic_state()", "tensorflow.random.Generator.from_seed.reset_from_seed()", "tensorflow.random.Generator.from_seed.split()", "tensorflow.distribute.MirroredStrategy()", "tensorflow.distribute.MirroredStrategy.run()", "tensorflow.random.Generator.from_seed.normal()", "tensorflow.train.Checkpoint()", "tensorflow.train.Checkpoint.write()", "tensorflow.train.Checkpoint.restore()", "tensorflow.saved_model.load()", "tensorflow.saved_model.save()", "tensorflow.distribute.MirroredStrategy()", "tensorflow.distribute.MultiWorkerMirroredStrategy()", "tensorflow.distribute.experimental.CommunicationOptions()", "tensorflow.distribute.experimental.CentralStorageStrategy()", "tensorflow.distribute.get_strategy()", "tensorflow.distribute.get_strategy.reduce()", "tensorflow.keras.Sequential()", "tensorflow.keras.Sequential.compile()", "tensorflow.data.Dataset.from_tensors(([1.0], [1.0])).repeat(100).batch()", "tensorflow.data.Dataset.from_tensors(([1.0], [1.0])).repeat()", "tensorflow.data.Dataset.from_tensors(([1.], [1.])).repeat.batch()", "tensorflow.keras.optimizers.SGD()", "tensorflow.data.Dataset.from_tensors(([1.0], [1.0])).repeat(1000).batch()", "tensorflow.distribute.MirroredStrategy.experimental_distribute_dataset()", "tensorflow.keras.losses.BinaryCrossentropy()", "tensorflow.nn.compute_average_loss()", "tensorflow.keras.optimizers.SGD.apply_gradients()", "tensorflow.distribute.MirroredStrategy.run()", "tensorflow.keras.Sequential.fit()", "tensorflow.keras.Sequential.evaluate()", "tensorflow.random.set_seed()", "tensorflow.cast()", "tensorflow.Variable()", "tensorflow.Variable.numpy()", "tensorflow.range()", "tensorflow.meshgrid()", "tensorflow.math.log()", "tensorflow.random.set_seed()", "tensorflow.config.list_physical_devices()", "tensorflow.config.experimental.set_memory_growth()", "tensorflow.keras.utils.load_img()", "tensorflow.keras.utils.img_to_array()", "tensorflow.keras.applications.mobilenet.preprocess_input()", "tensorflow.keras.utils.get_file()", "tensorflow.Variable()", "tensorflow.Module()", "tensorflow.saved_model.load()", "tensorflow.saved_model.load.mutate()", "tensorflow.keras.optimizers.SGD()", "tensorflow.keras.optimizers.SGD.apply_gradients()", "tensorflow.Module.__call__.get_concrete_function()", "tensorflow.saved_model.save()", "tensorflow.io.read_file()", "tensorflow.image.decode_jpeg()", "tensorflow.ragged.constant()", "tensorflow.ragged.constant.to_list()", "tensorflow.ragged.constant.numpy()", "tensorflow.Variable()", "tensorflow.strings.to_hash_bucket_fast()", "tensorflow.nn.embedding_lookup()", "tensorflow.fill()", "tensorflow.concat()", "tensorflow.strings.join()", "tensorflow.reduce_mean()", "tensorflow.ragged.constant.to_sparse()", "tensorflow.sparse.concat()", "tensorflow.constant()", "tensorflow.strings.split()", "tensorflow.keras.Sequential.compile()", "tensorflow.io.parse_example()", "tensorflow.data.Dataset.from_tensor_slices()", "tensorflow.data.Dataset.from_tensor_slices.batch()", "tensorflow.data.Dataset.from_tensor_slices.batch.unbatch()", "tensorflow.data.Dataset.from_tensor_slices.map()", "tensorflow.data.Dataset.from_tensor_slices.map.apply()", "tensorflow.saved_model.load()", "tensorflow.Module.grow.get_concrete_function()", "tensorflow.saved_model.save()", "tensorflow.saved_model.load.grow()", "tensorflow.SparseTensor()", "tensorflow.shape()", "tensorflow.experimental.DynamicRaggedShape()", "tensorflow.experimental.DynamicRaggedShape.from_lengths()", "tensorflow.RaggedTensor.from_row_splits()", "tensorflow.RaggedTensor.from_nested_row_splits()", "tensorflow.ragged.constant.flat_values.numpy()", "tensorflow.linalg.diag()", "tensorflow.transpose()", "tensorflow.einsum()", "tensorflow.linalg.svd()", "tensorflow.size()", "tensorflow.reduce_mean()", "tensorflow.map_fn()", "tensorflow.reduce_sum()", "tensorflow.cast()", "tensorflow.keras.Sequential()", "tensorflow.keras.Sequential.compile()", "tensorflow.keras.optimizers.Adam()", "tensorflow.keras.losses.SparseCategoricalCrossentropy()", "tensorflow.math.add_n()", "tensorflow.keras.optimizers.Adam.apply_gradients()", "tensorflow.keras.layers.LSTMCell()", "tensorflow.transpose()", "tensorflow.TensorArray()", "tensorflow.TensorArray.write()", "tensorflow.keras.losses.CategoricalCrossentropy()", "tensorflow.keras.losses.CategoricalCrossentropy([[1, 0]], [[-1.0, 3.0]]).numpy()", "tensorflow.keras.metrics.Mean()", "tensorflow.keras.metrics.SparseCategoricalAccuracy()", "tensorflow.keras.metrics.Mean.reset_states()", "tensorflow.keras.metrics.SparseCategoricalAccuracy.reset_states()", "tensorflow.keras.metrics.Mean.update_state()", "tensorflow.keras.metrics.SparseCategoricalAccuracy.update_state()", "tensorflow.keras.metrics.Mean.result()", "tensorflow.keras.metrics.SparseCategoricalAccuracy.result()", "tensorflow.keras.Sequential.fit.history.keys()", "tensorflow.keras.Sequential.evaluate()", "tensorflow.keras.Model()", "tensorflow.data.TFRecordDataset([val_path]).map()", "tensorflow.keras.utils.get_file()", "tensorflow.data.Dataset.from_tensor_slices()", "tensorflow.data.Dataset.from_tensor_slices.shuffle(1000).repeat()", "tensorflow.estimator.DNNClassifier.predict()", "tensorflow.compat.v1.disable_eager_execution()", "tensorflow.compat.v1.logging.set_verbosity()", "tensorflow.compat.v1.placeholder()", "tensorflow.compat.v1.data.make_one_shot_iterator(batched_ds).get_next()", "tensorflow.compat.v1.estimator.Estimator()", "tensorflow.compat.v1.layers.dense()", "tensorflow.compat.v1.argmax()", "tensorflow.compat.v1.nn.sparse_softmax_cross_entropy_with_logits()", "tensorflow.compat.v1.reduce_mean()", "tensorflow.compat.v1.train.GradientDescentOptimizer()", "tensorflow.compat.v1.train.GradientDescentOptimizer.minimize()", "tensorflow.compat.v1.metrics.accuracy()", "tensorflow.compat.v1.metrics.precision()", "tensorflow.compat.v1.metrics.recall()", "tensorflow.compat.v1.estimator.Estimator.predict()", "tensorflow.TensorShape()", "tensorflow.compat.v1.disable_tensor_equality()", "tensorflow.Variable()", "tensorflow.compat.v1.enable_tensor_equality()", "tensorflow.Variable.ref().deref()", "tensorflow.keras.Sequential.compile()", "tensorflow.keras.models.save_model()", "tensorflow.random.set_seed()", "tensorflow.Variable()", "tensorflow.linspace()", "tensorflow.cast()", "tensorflow.random.uniform()", "tensorflow.squeeze()", "tensorflow.data.Dataset.from_tensor_slices()", "tensorflow.data.Dataset.from_tensor_slices.shuffle(buffer_size=x_train.shape[0]).batch()", "tensorflow.data.Dataset.from_tensor_slices.shuffle(buffer_size=x_test.shape[0]).batch()", "tensorflow.add()", "tensorflow.nn.sigmoid_cross_entropy_with_logits()", "tensorflow.math.sigmoid()", "tensorflow.reduce_mean()", "tensorflow.Module()", "tensorflow.saved_model.load()", "tensorflow.saved_model.load[:10].numpy()", "tensorflow.keras.utils.get_file()", "tensorflow.image.crop_to_bounding_box()", "tensorflow.image.resize()", "tensorflow.sparse.from_dense()", "tensorflow.sparse.to_dense()", "tensorflow.sparse.SparseTensor()", "tensorflow.sparse.add()", "tensorflow.constant()", "tensorflow.sparse.sparse_dense_matmul()", "tensorflow.sparse.concat()", "tensorflow.sparse.slice()", "tensorflow.sparse.map_values()", "tensorflow.keras.Input()", "tensorflow.keras.layers.Dense(4)()", "tensorflow.keras.Model()", "tensorflow.keras.Model.predict()", "tensorflow.data.Dataset.from_tensor_slices()", "tensorflow.data.Dataset.from_tensor_slices.batch()", "tensorflow.data.Dataset.from_tensor_slices.batch.unbatch()", "tensorflow.data.Dataset.from_tensor_slices.map()", "tensorflow.keras.utils.get_file()", "tensorflow.io.read_file()", "tensorflow.image.decode_image()", "tensorflow.cast()", "tensorflow.image.resize()", "tensorflow.keras.applications.mobilenet_v2.preprocess_input()", "tensorflow.keras.losses.CategoricalCrossentropy()", "tensorflow.one_hot()", "tensorflow.reshape()", "tensorflow.keras.applications.MobileNetV2()", "tensorflow.sign()", "tensorflow.clip_by_value()", "tensorflow.keras.optimizers.Adam()", "tensorflow.keras.Sequential.compile()", "tensorflow.keras.models.save_model()", "tensorflow.compat.v1.logging.set_verbosity()", "tensorflow.config.list_physical_devices()", "tensorflow.config.experimental.set_memory_growth()", "tensorflow.keras.utils.get_file()", "tensorflow.data.Dataset.from_tensor_slices()", "tensorflow.data.Dataset.from_tensor_slices.shuffle(SHUFFLE_BUFFER_SIZE).batch()", "tensorflow.data.Dataset.from_tensor_slices.batch()", "tensorflow.keras.Sequential()", "tensorflow.keras.Sequential.compile()", "tensorflow.py_function()", "tensorflow.data.Dataset.range()", "tensorflow.print()", "tensorflow.zeros()", "tensorflow.concat()", "tensorflow.keras.utils.get_file()", "tensorflow.stack()", "tensorflow.data.experimental.CsvDataset.batch(10000).map(pack_row).unbatch.take(N_VALIDATION).cache()", "tensorflow.data.experimental.CsvDataset.batch(10000).map(pack_row).unbatch.skip(N_VALIDATION).take(N_TRAIN).cache()", "tensorflow.data.experimental.CsvDataset.batch(10000).map(pack_row).unbatch.take(N_VALIDATION).cache.batch()", "tensorflow.data.experimental.CsvDataset.batch(10000).map(pack_row).unbatch.skip(N_VALIDATION).take(N_TRAIN).cache.shuffle(BUFFER_SIZE).repeat().batch()", "tensorflow.keras.optimizers.schedules.InverseTimeDecay()", "tensorflow.keras.Sequential()", "tensorflow.add_n()", "tensorflow.keras.utils.image_dataset_from_directory()", "tensorflow.keras.utils.image_dataset_from_directory.cache().shuffle(1000).prefetch()", "tensorflow.keras.utils.image_dataset_from_directory.cache().prefetch()", "tensorflow.keras.layers.Rescaling()", "tensorflow.keras.utils.image_dataset_from_directory.cache().shuffle(1000).prefetch.map()", "tensorflow.keras.models.Sequential()", "tensorflow.keras.models.Sequential.summary()", "tensorflow.keras.models.Sequential.compile()", "tensorflow.keras.utils.get_file()", "tensorflow.keras.utils.load_img()", "tensorflow.keras.utils.img_to_array()", "tensorflow.expand_dims()", "tensorflow.keras.models.Sequential.predict()", "tensorflow.nn.softmax()", "tensorflow.lite.TFLiteConverter.from_keras_model()", "tensorflow.lite.Interpreter()", "tensorflow.lite.Interpreter.get_signature_list()", "tensorflow.lite.Interpreter.get_signature_runner()", "tensorflow.keras.Sequential.compile()", "tensorflow.keras.Sequential()", "tensorflow.keras.Sequential.predict()", "tensorflow.keras.layers.Normalization()", "tensorflow.keras.layers.Normalization.adapt()", "tensorflow.keras.Sequential()", "tensorflow.keras.Sequential.summary()", "tensorflow.keras.Sequential.evaluate()", "tensorflow.linspace()", "tensorflow.keras.Sequential.predict()", "tensorflow.keras.Sequential.compile()", "tensorflow.compat.v1.estimator.inputs.numpy_input_fn()", "tensorflow.compat.v1.estimator.TrainSpec()", "tensorflow.compat.v1.estimator.EvalSpec()", "tensorflow.keras.losses.SparseCategoricalCrossentropy()", "tensorflow.keras.callbacks.ModelCheckpoint()", "tensorflow.data.Dataset.from_tensor_slices.batch()", "tensorflow.data.Dataset.from_tensor_slices()", "tensorflow.random.set_seed()", "tensorflow.squeeze()", "tensorflow.signal.stft()", "tensorflow.abs()", "tensorflow.keras.layers.Normalization()", "tensorflow.keras.models.Sequential()", "tensorflow.argmax()", "tensorflow.concat()", "tensorflow.math.confusion_matrix()", "tensorflow.io.read_file()", "tensorflow.audio.decode_wav()", "tensorflow.gather()", "tensorflow.Module()", "tensorflow.debugging.set_log_device_placement()", "tensorflow.constant()", "tensorflow.matmul()", "tensorflow.config.list_physical_devices()", "tensorflow.config.set_visible_devices()", "tensorflow.config.list_logical_devices()", "tensorflow.config.set_soft_device_placement()", "tensorflow.distribute.MirroredStrategy()", "tensorflow.keras.layers.Input()", "tensorflow.keras.layers.Dense(1)()", "tensorflow.keras.models.Model()", "tensorflow.keras.models.Model.compile()", "tensorflow.matmul.append()", "tensorflow.add_n()", "tensorflow.keras.utils.get_file()", "tensorflow.io.read_file()", "tensorflow.audio.decode_wav()", "tensorflow.squeeze()", "tensorflow.cast()", "tensorflow.reduce_mean()", "tensorflow.math.argmax()", "tensorflow.data.Dataset.from_tensor_slices()", "tensorflow.data.Dataset.from_tensor_slices.map()", "tensorflow.data.Dataset.from_tensor_slices.map.map(extract_embedding).unbatch()", "tensorflow.data.Dataset.from_tensor_slices.map.map(extract_embedding).unbatch.cache()", "tensorflow.data.Dataset.from_tensor_slices.map.map(extract_embedding).unbatch.cache.filter()", "tensorflow.data.Dataset.from_tensor_slices.map.map(extract_embedding).unbatch.cache.filter.map()", "tensorflow.data.Dataset.from_tensor_slices.map.map(extract_embedding).unbatch.cache.filter.map.cache().shuffle(1000).batch(32).prefetch()", "tensorflow.data.Dataset.from_tensor_slices.map.map(extract_embedding).unbatch.cache.filter.map.cache().batch(32).prefetch()", "tensorflow.keras.Sequential()", "tensorflow.keras.Sequential.summary()", "tensorflow.keras.Sequential.compile()", "tensorflow.keras.callbacks.EarlyStopping()", "tensorflow.keras.Sequential.evaluate()", "tensorflow.keras.Sequential(embeddings).numpy()", "tensorflow.keras.layers.Input()", "tensorflow.keras.Model()", "tensorflow.keras.utils.plot_model()", "tensorflow.saved_model.load.signatures['serving_default']()", "tensorflow.saved_model.load()", "tensorflow.nn.softmax()", "tensorflow.keras.callbacks.EarlyStopping()", "tensorflow.keras.Sequential()", "tensorflow.keras.Sequential.compile()", "tensorflow.keras.initializers.Constant()", "tensorflow.data.Dataset.from_tensor_slices()", "tensorflow.data.Dataset.from_tensor_slices.shuffle(BUFFER_SIZE).repeat()", "tensorflow.data.Dataset.sample_from_datasets()", "tensorflow.data.Dataset.sample_from_datasets.batch(BATCH_SIZE).prefetch()", "tensorflow.data.Dataset.from_tensor_slices((val_features, val_labels)).cache()", "tensorflow.data.Dataset.from_tensor_slices((val_features, val_labels)).cache.batch(BATCH_SIZE).prefetch()", "tensorflow.data.TFRecordDataset([val_path]).map()", "tensorflow.Variable()", "tensorflow.reduce_mean()", "tensorflow.keras.layers.Dense()", "tensorflow.constant()", "tensorflow.math.sin()", "tensorflow.nn.softplus()", "tensorflow.reduce_sum()", "tensorflow.linspace()", "tensorflow.nn.sigmoid()", "tensorflow.Variable.assign_add()", "tensorflow.image.adjust_contrast()", "tensorflow.compat.v1.disable_eager_execution()", "tensorflow.data.TFRecordDataset([val_path]).map()", "tensorflow.keras.layers.StringLookup()", "tensorflow.keras.layers.Hashing()", "tensorflow.keras.layers.Embedding()", "tensorflow.keras.Sequential()", "tensorflow.keras.layers.Normalization()", "tensorflow.keras.layers.TextVectorization()", "tensorflow.Variable()", "tensorflow.keras.layers.Conv2D()", "tensorflow.zeros()", "tensorflow.compat.v1.estimator.Estimator()", "tensorflow.compat.v1.estimator.TrainSpec()", "tensorflow.compat.v1.estimator.EvalSpec()", "tensorflow.compat.v1.layers.Dense(1)()", "tensorflow.compat.v1.losses.mean_squared_error()", "tensorflow.compat.v1.train.AdagradOptimizer()", "tensorflow.compat.v1.train.AdagradOptimizer.minimize()", "tensorflow.distribute.cluster_resolver.TFConfigClusterResolver()", "tensorflow.compat.v1.ConfigProto()", "tensorflow.distribute.Server()", "tensorflow.distribute.experimental.ParameterServerStrategy()", "tensorflow.data.Dataset.from_tensor_slices((features, labels)).shuffle(10).repeat().batch()", "tensorflow.data.Dataset.from_tensor_slices((eval_features, eval_labels)).repeat().batch()", "tensorflow.keras.models.Sequential()", "tensorflow.compat.v1.disable_v2_behavior()", "tensorflow.get_logger().setLevel()", "tensorflow.keras.Sequential.compile()", "tensorflow.keras.models.save_model()", "tensorflow.constant()", "tensorflow.Variable()", "tensorflow.compat.v1.disable_v2_behavior()", "tensorflow.compat.v1.nn.avg_pool()", "tensorflow.compat.v1.concat()", "tensorflow.compat.v1.reduce_mean()", "tensorflow.compat.v1.global_variables_initializer()", "tensorflow.compat.v1.reduce_min()", "tensorflow.data.Dataset.from_tensor_slices(test_images).shuffle(test_size).batch()", "tensorflow.keras.optimizers.Adam()", "tensorflow.random.normal()", "tensorflow.keras.Sequential()", "tensorflow.keras.Model.reparameterize()", "tensorflow.sigmoid()", "tensorflow.split()", "tensorflow.keras.Sequential.reparameterize()", "tensorflow.keras.Sequential.decode()", "tensorflow.nn.sigmoid_cross_entropy_with_logits()", "tensorflow.math.log()", "tensorflow.keras.optimizers.Adam.apply_gradients()", "tensorflow.keras.Sequential.encode()", "tensorflow.keras.metrics.Mean()", "tensorflow.keras.Model.encode()", "tensorflow.keras.Model.sample()", "tensorflow.reshape()", "tensorflow.reshape.numpy()", "tensorflow.keras.Sequential.compile()", "tensorflow.keras.callbacks.ModelCheckpoint()", "tensorflow.keras.Sequential()", "tensorflow.train.latest_checkpoint()", "tensorflow.keras.models.load_model()", "tensorflow.keras.models.load_model.summary()", "tensorflow.keras.models.load_model.evaluate()", "tensorflow.keras.datasets.mnist.load_data()", "tensorflow.nn.softmax(predictions).numpy()", "tensorflow.keras.losses.SparseCategoricalCrossentropy()", "tensorflow.keras.models.Sequential.compile()", "tensorflow.keras.Sequential()", "tensorflow.keras.losses.SparseCategoricalCrossentropy(y_train[:1], predictions).numpy()", "tensorflow.compat.v1.estimator.RunConfig()", "tensorflow.compat.v1.estimator.inputs.numpy_input_fn()", "tensorflow.compat.v1.estimator.TrainSpec()", "tensorflow.compat.v1.estimator.EvalSpec()", "tensorflow.keras.callbacks.ModelCheckpoint()", "tensorflow.compat.v1.estimator.Estimator()", "tensorflow.compat.v1.estimator.experimental.make_early_stopping_hook()", "tensorflow.compat.v1.estimator.TrainSpec()", "tensorflow.compat.v1.estimator.EvalSpec()", "tensorflow.compat.v1.layers.Flatten()()", "tensorflow.compat.v1.layers.Dense(128, 'relu')()", "tensorflow.compat.v1.layers.Dense(10)()", "tensorflow.compat.v1.losses.sparse_softmax_cross_entropy()", "tensorflow.compat.v1.train.AdagradOptimizer()", "tensorflow.compat.v1.train.AdagradOptimizer.minimize()", "tensorflow.keras.models.Sequential()", "tensorflow.keras.models.Sequential.compile()", "tensorflow.keras.callbacks.EarlyStopping()", "tensorflow.keras.optimizers.Adam()", "tensorflow.keras.losses.SparseCategoricalCrossentropy()", "tensorflow.keras.metrics.SparseCategoricalAccuracy()", "tensorflow.keras.metrics.SparseCategoricalCrossentropy()", "tensorflow.keras.optimizers.Adam.apply_gradients()", "tensorflow.keras.metrics.SparseCategoricalAccuracy.update_state()", "tensorflow.keras.metrics.SparseCategoricalCrossentropy.update_state()", "tensorflow.keras.metrics.SparseCategoricalAccuracy.result()", "tensorflow.keras.metrics.SparseCategoricalCrossentropy.result()", "tensorflow.keras.metrics.SparseCategoricalAccuracy.reset_states()", "tensorflow.keras.metrics.SparseCategoricalCrossentropy.reset_states()", "tensorflow.compat.v1.disable_eager_execution()", "tensorflow.constant()", "tensorflow.ones()", "tensorflow.cast()", "tensorflow.experimental.numpy.experimental_enable_numpy_behavior()", "tensorflow.experimental.numpy.ones()", "tensorflow.experimental.numpy.arange(24).reshape()", "tensorflow.experimental.numpy.sqrt(size).astype()", "tensorflow.experimental.numpy.random.randn(64).astype()", "tensorflow.experimental.numpy.maximum()", "tensorflow.experimental.numpy.sum()", "tensorflow.constant()", "tensorflow.experimental.numpy.asarray()", "tensorflow.reduce_sum()", "tensorflow.function()", "tensorflow.experimental.numpy.copy()", "tensorflow.keras.Sequential.compile()", "tensorflow.keras.datasets.mnist.load_data()", "tensorflow.keras.utils.get_file()", "tensorflow.data.Dataset.from_tensor_slices.shuffle()", "tensorflow.data.Dataset.from_tensor_slices.shuffle.batch()", "tensorflow.data.Dataset.from_tensor_slices()", "tensorflow.feature_column.numeric_column()", "tensorflow.keras.layers.DenseFeatures()", "tensorflow.feature_column.bucketized_column()", "tensorflow.feature_column.categorical_column_with_vocabulary_list()", "tensorflow.feature_column.indicator_column()", "tensorflow.feature_column.embedding_column()", "tensorflow.feature_column.categorical_column_with_hash_bucket()", "tensorflow.feature_column.crossed_column()", "tensorflow.keras.Sequential.compile()", "tensorflow.keras.Sequential()", "tensorflow.Variable()", "tensorflow.saved_model.save()", "tensorflow.saved_model.load()", "tensorflow.saved_model.load.call_custom_grad()", "tensorflow.constant()", "tensorflow.math.sin()", "tensorflow.nn.sigmoid()", "tensorflow.reduce_sum()", "tensorflow.random.normal()", "tensorflow.keras.layers.Dense()", "tensorflow.norm()", "tensorflow.linspace()", "tensorflow.reduce_max(abs(g - j_sum)).numpy()", "tensorflow.reduce_mean()", "tensorflow.reduce_prod()", "tensorflow.reshape()", "tensorflow.reduce_max()", "tensorflow.keras.layers.Dense.kernel.assign_sub()", "tensorflow.transpose()", "tensorflow.pad()", "tensorflow.einsum()", "tensorflow.keras.layers.BatchNormalization()", "tensorflow.linalg.solve()", "tensorflow.keras.datasets.mnist.load_data()", "tensorflow.data.TFRecordDataset()", "tensorflow.io.decode_raw()", "tensorflow.reshape()", "tensorflow.data.Dataset.from_tensor_slices((train_images, train_labels)).shuffle(BUFFER_SIZE).batch()", "tensorflow.data.Dataset.from_tensor_slices((test_images, test_labels)).batch()", "tensorflow.distribute.MirroredStrategy.experimental_distribute_dataset()", "tensorflow.keras.losses.SparseCategoricalCrossentropy()", "tensorflow.keras.metrics.Mean()", "tensorflow.keras.metrics.SparseCategoricalAccuracy()", "tensorflow.keras.regularizers.L2()", "tensorflow.keras.Sequential()", "tensorflow.keras.optimizers.Adam()", "tensorflow.train.Checkpoint()", "tensorflow.nn.compute_average_loss()", "tensorflow.keras.optimizers.Adam.apply_gradients()", "tensorflow.keras.metrics.SparseCategoricalAccuracy.update_state()", "tensorflow.distribute.MirroredStrategy.run()", "tensorflow.keras.metrics.Mean.update_state()", "tensorflow.train.Checkpoint.save()", "tensorflow.keras.metrics.Mean.reset_states()", "tensorflow.keras.metrics.SparseCategoricalAccuracy.reset_states()", "tensorflow.train.Checkpoint.restore()", "tensorflow.keras.datasets.mnist.load_data()", "tensorflow.data.Dataset.from_tensor_slices.shuffle(buffer_size=1024).batch()", "tensorflow.data.Dataset.from_tensor_slices()", "tensorflow.data.Dataset.from_tensor_slices.batch()", "tensorflow.keras.metrics.Accuracy()", "tensorflow.argmax()", "tensorflow.keras.layers.Conv2D()", "tensorflow.keras.layers.Flatten()", "tensorflow.keras.layers.Dense()", "tensorflow.keras.losses.SparseCategoricalCrossentropy()", "tensorflow.keras.optimizers.Adam()", "tensorflow.keras.metrics.Mean()", "tensorflow.keras.metrics.SparseCategoricalAccuracy()", "tensorflow.keras.metrics.Mean.reset_states()", "tensorflow.keras.metrics.SparseCategoricalAccuracy.reset_states()", "tensorflow.keras.optimizers.Adam.apply_gradients()", "tensorflow.keras.Model()", "tensorflow.data.Dataset.from_tensor_slices((x_test, y_test)).batch()", "tensorflow.keras.datasets.mnist.load_data()", "tensorflow.data.Dataset.from_generator.batch()", "tensorflow.data.Dataset.from_generator()", "tensorflow.keras.Sequential()", "tensorflow.keras.losses.SparseCategoricalCrossentropy()", "tensorflow.keras.metrics.Accuracy()", "tensorflow.keras.optimizers.Adam()", "tensorflow.argmax()", "tensorflow.keras.optimizers.Adam.apply_gradients()", "tensorflow.Variable()", "tensorflow.Module()", "tensorflow.keras.layers.Dense()", "tensorflow.nest.map_structure()", "tensorflow.keras.backend.clear_session()", "tensorflow.keras.optimizers.Adam()", "tensorflow.keras.Sequential()", "tensorflow.keras.Sequential.add()", "tensorflow.nest.assert_same_structure()", "tensorflow.function()", "tensorflow.keras.optimizers.Adam.iterations.numpy()", "tensorflow.cast()", "tensorflow.keras.layers.Layer()", "tensorflow.compat.v1.estimator.RunConfig()", "tensorflow.compat.v1.estimator.inputs.numpy_input_fn()", "tensorflow.compat.v1.estimator.TrainSpec()", "tensorflow.compat.v1.estimator.EvalSpec()", "tensorflow.keras.callbacks.TensorBoard()", "tensorflow.cast()", "tensorflow.random.normal()", "tensorflow.Variable()", "tensorflow.Module.w.assign_sub()", "tensorflow.Module.b.assign_sub()", "tensorflow.keras.Model.save_weights()", "tensorflow.keras.Model.compile()", "tensorflow.keras.Model.fit()", "tensorflow.constant()", "tensorflow.gather_nd()", "tensorflow.scatter_nd()", "tensorflow.SparseTensor()", "tensorflow.sparse.to_dense()", "tensorflow.tensor_scatter_nd_add()", "tensorflow.tensor_scatter_nd_sub()", "tensorflow.tensor_scatter_nd_min()", "tensorflow.tensor_scatter_nd_max()", "tensorflow.compat.v1.estimator.RunConfig()", "tensorflow.compat.v1.estimator.Estimator()", "tensorflow.compat.v1.estimator.TrainSpec()", "tensorflow.compat.v1.estimator.EvalSpec()", "tensorflow.compat.v1.layers.Dense(1)()", "tensorflow.compat.v1.losses.mean_squared_error()", "tensorflow.compat.v1.train.AdagradOptimizer()", "tensorflow.compat.v1.train.AdagradOptimizer.minimize()", "tensorflow.data.Dataset.from_tensor_slices((features, labels)).batch()", "tensorflow.data.Dataset.from_tensor_slices((eval_features, eval_labels)).batch()", "tensorflow.distribute.MirroredStrategy()", "tensorflow.keras.models.Sequential()", "tensorflow.keras.optimizers.Adagrad()", "tensorflow.keras.models.Sequential.compile()", "tensorflow.keras.models.Sequential.evaluate()", "tensorflow.random.set_seed()", "tensorflow.squeeze()", "tensorflow.reshape()", "tensorflow.linspace()", "tensorflow.cast()", "tensorflow.random.uniform()", "tensorflow.Variable()", "tensorflow.add()", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits()", "tensorflow.argmax()", "tensorflow.equal()", "tensorflow.saved_model.load()", "tensorflow.function()", "tensorflow.constant()", "tensorflow.matmul()", "tensorflow.random.uniform()", "tensorflow.pow()", "tensorflow.config.run_functions_eagerly()", "tensorflow.gather()", "tensorflow.eye()", "tensorflow.get_logger().setLevel()", "tensorflow.lite.Interpreter()", "tensorflow.lite.Interpreter.allocate_tensors()", "tensorflow.lite.Interpreter.get_input_details()", "tensorflow.lite.Interpreter.get_output_details()", "tensorflow.keras.Sequential.compile()", "tensorflow.keras.models.save_model()", "tensorflow.constant()", "tensorflow.add()", "tensorflow.keras.datasets.mnist.load_data()", "tensorflow.keras.Sequential.compile()", "tensorflow.keras.models.Sequential.compile()", "tensorflow.keras.models.Sequential.summary()", "tensorflow.keras.estimator.model_to_estimator()", "tensorflow.keras.estimator.model_to_estimator.evaluate()", "tensorflow.data.Dataset.from_tensor_slices.shuffle()", "tensorflow.data.Dataset.from_tensor_slices.shuffle.batch(batch_size).repeat()", "tensorflow.keras.layers.DenseFeatures([tf.feature_column.indicator_column(gender_column)])(feature_batch).numpy()", "tensorflow.estimator.LinearClassifier()", "tensorflow.data.Dataset.from_tensor_slices()", "tensorflow.feature_column.crossed_column()", "tensorflow.keras.layers.DenseFeatures([age_column])(feature_batch).numpy()", "tensorflow.keras.layers.Dense()", "tensorflow.keras.Model.save_weights()", "tensorflow.keras.optimizers.Adam()", "tensorflow.train.Checkpoint()", "tensorflow.train.CheckpointManager()", "tensorflow.train.Checkpoint.restore()", "tensorflow.reduce_mean()", "tensorflow.train.Checkpoint.step.assign_add()", "tensorflow.keras.Model()", "tensorflow.train.CheckpointManager.save()", "tensorflow.Variable()", "tensorflow.train.Checkpoint.restore.assert_existing_objects_matched()", "tensorflow.train.load_checkpoint()", "tensorflow.train.load_checkpoint.get_variable_to_shape_map()", "tensorflow.train.load_checkpoint.get_variable_to_dtype_map()", "tensorflow.train.load_checkpoint.get_tensor()", "tensorflow.train.Checkpoint.listed.append()", "tensorflow.train.Checkpoint.save()", "tensorflow.keras.models.Sequential()", "tensorflow.keras.models.Sequential.compile()", "tensorflow.compat.v1.logging.set_verbosity()", "tensorflow.constant()", "tensorflow.constant.numpy()", "tensorflow.convert_to_tensor()", "tensorflow.reduce_max()", "tensorflow.zeros()", "tensorflow.rank()", "tensorflow.shape()", "tensorflow.reshape()", "tensorflow.cast()", "tensorflow.range()", "tensorflow.ragged.constant()", "tensorflow.strings.bytes_split()", "tensorflow.io.decode_raw()", "tensorflow.strings.unicode_split()", "tensorflow.strings.unicode_decode()", "tensorflow.sparse.SparseTensor()", "tensorflow.get_logger().setLevel()", "tensorflow.compat.v1.estimator.Estimator()", "tensorflow.compat.v1.layers.Dense(1)()", "tensorflow.compat.v1.losses.mean_squared_error()", "tensorflow.compat.v1.train.AdagradOptimizer()", "tensorflow.compat.v1.train.AdagradOptimizer.minimize()", "tensorflow.data.Dataset.from_tensor_slices((features, labels)).batch(1).repeat()", "tensorflow.keras.models.Sequential()", "tensorflow.keras.optimizers.Adagrad()", "tensorflow.keras.models.Sequential.compile()", "tensorflow.feature_column.numeric_column()", "tensorflow.feature_column.categorical_column_with_vocabulary_list()", "tensorflow.feature_column.categorical_column_with_hash_bucket()", "tensorflow.estimator.LinearClassifier()", "tensorflow.data.experimental.make_csv_dataset()", "tensorflow.data.experimental.make_csv_dataset.cache().repeat().shuffle(500).prefetch()", "tensorflow.keras.utils.get_file()", "tensorflow.keras.Sequential()", "tensorflow.keras.Sequential.compile()", "tensorflow.cast()", "tensorflow.image.resize()", "tensorflow.keras.backend.clear_session()", "tensorflow.estimator.Estimator()", "tensorflow.keras.layers.Dense()", "tensorflow.keras.optimizers.Adam()", "tensorflow.train.Checkpoint()", "tensorflow.keras.Model()", "tensorflow.reduce_mean()", "tensorflow.train.Checkpoint.restore()", "tensorflow.train.Checkpoint.step.numpy()", "tensorflow.estimator.export.build_parsing_serving_input_receiver_fn()", "tensorflow.saved_model.load()", "tensorflow.train.Example()", "tensorflow.train.Example.features.feature['x'].float_list.value.extend()", "tensorflow.distribute.MirroredStrategy()", "tensorflow.estimator.RunConfig()", "tensorflow.estimator.LinearRegressor()", "tensorflow.data.Dataset.from_tensors()", "tensorflow.estimator.LinearClassifier.export_saved_model()", "tensorflow.keras.Sequential.compile()", "tensorflow.keras.models.save_model()", "tensorflow.keras.Sequential.compile()", "tensorflow.keras.models.save_model()", "tensorflow.random.set_seed()", "tensorflow.random.shuffle()", "tensorflow.cast()", "tensorflow.one_hot()", "tensorflow.concat()", "tensorflow.math.reduce_mean()", "tensorflow.math.reduce_std()", "tensorflow.random.uniform()", "tensorflow.Variable()", "tensorflow.add()", "tensorflow.Module.unnorm()", "tensorflow.data.Dataset.from_tensor_slices()", "tensorflow.data.Dataset.from_tensor_slices.shuffle(buffer_size=x_train.shape[0]).batch()", "tensorflow.data.Dataset.from_tensor_slices.shuffle(buffer_size=x_test.shape[0]).batch()", "tensorflow.Module()", "tensorflow.reduce_mean()", "tensorflow.saved_model.load()", "tensorflow.saved_model.load[:10].numpy()", "tensorflow.constant()", "tensorflow.keras.layers.Dense()", "tensorflow.keras.layers.Dropout()", "tensorflow.function()", "tensorflow.random.uniform()", "tensorflow.compat.v1.estimator.Estimator()", "tensorflow.compat.v1.layers.Dense(2)()", "tensorflow.math.argmax()", "tensorflow.compat.v1.nn.sparse_softmax_cross_entropy_with_logits()", "tensorflow.compat.v1.train.AdagradOptimizer()", "tensorflow.compat.v1.train.AdagradOptimizer.minimize()", "tensorflow.compat.v1.metrics.accuracy()", "tensorflow.compat.v1.estimator.Estimator.evaluate()", "tensorflow.compat.v1.estimator.add_metrics()", "tensorflow.cast()", "tensorflow.data.Dataset.from_tensor_slices((features, labels)).batch()", "tensorflow.data.Dataset.from_tensor_slices((eval_features, eval_labels)).batch()", "tensorflow.keras.Input()", "tensorflow.keras.layers.Dense(2)()", "tensorflow.keras.models.Model()", "tensorflow.keras.optimizers.Adagrad()", "tensorflow.keras.models.Model.compile()", "tensorflow.keras.models.Model.evaluate()", "tensorflow.keras.metrics.Accuracy()", "tensorflow.keras.metrics.Accuracy.update_state()", "tensorflow.keras.metrics.Accuracy.result().numpy()", "tensorflow.compat.v1.estimator.add_metrics.evaluate()", "tensorflow.compat.v1.get_variable()", "tensorflow.compat.v1.nn.bias_add()", "tensorflow.linalg.matmul()", "tensorflow.keras.Input()", "tensorflow.keras.Model()", "tensorflow.random.normal()", "tensorflow.compat.v1.layers.flatten()", "tensorflow.compat.v1.layers.dense()", "tensorflow.compat.v1.layers.conv2d()", "tensorflow.keras.layers.Layer()", "tensorflow.compat.v1.estimator.RunConfig()", "tensorflow.compat.v1.estimator.inputs.numpy_input_fn()", "tensorflow.compat.v1.estimator.DNNClassifier()", "tensorflow.keras.losses.SparseCategoricalCrossentropy()", "tensorflow.compat.v1.logging.set_verbosity()", "tensorflow.keras.utils.get_file()", "tensorflow.compat.v1.estimator.Estimator()", "tensorflow.compat.v1.layers.Dense(1)()", "tensorflow.compat.v1.losses.mean_squared_error()", "tensorflow.compat.v1.train.AdagradOptimizer()", "tensorflow.compat.v1.train.AdagradOptimizer.minimize()", "tensorflow.data.Dataset.from_tensor_slices((features, labels)).batch()", "tensorflow.data.Dataset.from_tensor_slices((eval_features, eval_labels)).batch()", "tensorflow.keras.models.Sequential()", "tensorflow.keras.optimizers.Adagrad()", "tensorflow.keras.models.Sequential.compile()", "tensorflow.keras.models.Sequential.evaluate()", "tensorflow.keras.Sequential.compile()", "tensorflow.keras.Sequential.fit()", "tensorflow.keras.Sequential.evaluate()", "tensorflow.compat.v1.estimator.Estimator.evaluate()", "tensorflow.keras.models.Sequential.fit()", "tensorflow.keras.datasets.fashion_mnist.load_data()", "tensorflow.keras.Sequential()", "tensorflow.keras.models.Model.compile()", "tensorflow.keras.models.Model.encoder(x_test).numpy()", "tensorflow.keras.models.Model.decoder(encoded_imgs).numpy()", "tensorflow.clip_by_value()", "tensorflow.keras.models.Model.encoder.summary()", "tensorflow.keras.models.Model.decoder.summary()", "tensorflow.keras.models.Model.encoder(x_test_noisy).numpy()", "tensorflow.reduce_min()", "tensorflow.reduce_max()", "tensorflow.cast()", "tensorflow.keras.models.Model.encoder(normal_test_data).numpy()", "tensorflow.keras.models.Model.decoder(encoded_data).numpy()", "tensorflow.keras.models.Model.encoder(anomalous_test_data).numpy()", "tensorflow.keras.losses.mae()", "tensorflow.keras.models.Model.predict()", "tensorflow.compat.v1.estimator.Estimator()", "tensorflow.compat.v1.layers.Dense()", "tensorflow.compat.v1.losses.mean_squared_error()", "tensorflow.compat.v1.train.AdagradOptimizer()", "tensorflow.compat.v1.train.AdagradOptimizer.minimize()", "tensorflow.compat.v1.train.StopAtStepHook()", "tensorflow.identity()", "tensorflow.compat.v1.train.LoggingTensorHook()", "tensorflow.data.Dataset.from_tensor_slices((features, labels)).batch()", "tensorflow.keras.models.Sequential()", "tensorflow.keras.optimizers.Adagrad()", "tensorflow.keras.models.Sequential.compile()", "tensorflow.keras.models.Sequential.fit()", "tensorflow.config.optimizer.get_experimental_options()", "tensorflow.config.optimizer.set_experimental_options()", "tensorflow.constant()", "tensorflow.debugging.check_numerics()", "tensorflow.compat.v1.keras.layers.DenseFeatures()", "tensorflow.keras.layers.Concatenate()()", "tensorflow.keras.Model()", "tensorflow.compat.v1.feature_column.categorical_column_with_identity()", "tensorflow.compat.v1.feature_column.indicator_column()", "tensorflow.keras.layers.CategoryEncoding()", "tensorflow.compat.v1.feature_column.numeric_column()", "tensorflow.keras.layers.Normalization()", "tensorflow.compat.v1.feature_column.bucketized_column()", "tensorflow.keras.layers.Discretization()", "tensorflow.compat.v1.feature_column.categorical_column_with_vocabulary_list()", "tensorflow.keras.layers.StringLookup()", "tensorflow.compat.v1.feature_column.embedding_column()", "tensorflow.keras.layers.Embedding()", "tensorflow.constant()", "tensorflow.compat.v1.feature_column.weighted_categorical_column()", "tensorflow.sparse.to_dense()", "tensorflow.keras.layers.Dense()", "tensorflow.compat.v1.estimator.DNNClassifier()", "tensorflow.keras.layers.CategoryEncoding(one_hot_dims, output_mode='one_hot')()", "tensorflow.keras.layers.StringLookup(vocabulary=vocab)()", "tensorflow.keras.layers.Normalization(axis=None, mean=weight_mean, variance=weight_variance)()", "tensorflow.data.Dataset.from_tensor_slices((features, labels)).batch()", "tensorflow.data.Dataset.from_tensor_slices((features, labels)).batch.map()", "tensorflow.keras.layers.Dense(1)()", "tensorflow.keras.Model.compile()", "tensorflow.data.Dataset.from_tensor_slices(predict_features).batch()", "tensorflow.keras.Model.predict()", "tensorflow.keras.Model.save()", "tensorflow.keras.models.load_model()", "tensorflow.keras.models.load_model.predict()", "tensorflow.zeros()", "tensorflow.keras.mixed_precision.Policy()", "tensorflow.keras.mixed_precision.set_global_policy()", "tensorflow.keras.Input()", "tensorflow.keras.layers.Dense()", "tensorflow.keras.layers.Dense(10, activation='softmax', name='predictions')()", "tensorflow.keras.layers.Dense(10, name='dense_logits')()", "tensorflow.keras.layers.Activation('softmax', dtype='float32', name='predictions')()", "tensorflow.keras.layers.Activation('linear', dtype='float32')()", "tensorflow.keras.Model()", "tensorflow.keras.Model.compile()", "tensorflow.keras.Model.get_weights()", "tensorflow.constant()", "(tensorflow.constant ** 2).numpy()", "tensorflow.keras.optimizers.RMSprop()", "tensorflow.keras.mixed_precision.LossScaleOptimizer()", "tensorflow.keras.losses.SparseCategoricalCrossentropy()", "tensorflow.data.Dataset.from_tensor_slices((x_train, y_train)).shuffle(10000).batch()", "tensorflow.data.Dataset.from_tensor_slices((x_test, y_test)).batch()", "tensorflow.keras.Model.set_weights()", "tensorflow.keras.metrics.Mean()", "tensorflow.keras.metrics.SparseCategoricalAccuracy()", "tensorflow.keras.mixed_precision.LossScaleOptimizer.get_scaled_loss()", "tensorflow.keras.mixed_precision.LossScaleOptimizer.get_unscaled_gradients()", "tensorflow.keras.mixed_precision.LossScaleOptimizer.apply_gradients()", "tensorflow.keras.metrics.SparseCategoricalAccuracy.update_state()", "tensorflow.keras.datasets.mnist.load_data()", "tensorflow.nn.softmax()", "tensorflow.compat.v1.get_variable()", "tensorflow.compat.v1.train.Saver()", "tensorflow.compat.v1.train.Saver.save()", "tensorflow.train.load_checkpoint()", "tensorflow.train.load_checkpoint.get_variable_to_shape_map()", "tensorflow.train.load_checkpoint.get_variable_to_dtype_map()", "tensorflow.Variable()", "tensorflow.train.Checkpoint()", "tensorflow.train.Checkpoint.save()", "tensorflow.Module()", "tensorflow.compat.v1.train.Saver.restore()", "tensorflow.train.Checkpoint.restore()", "tensorflow.compat.v1.train.init_from_checkpoint()", "tensorflow.train.Checkpoint.restore(tf2_ckpt_path).assert_consumed().run_restore_ops()", "tensorflow.estimator.Estimator()", "tensorflow.compat.v1.train.get_or_create_global_step()", "tensorflow.train.latest_checkpoint()", "tensorflow.train.Checkpoint.restore('tf2-ckpt-saved-in-session-1').run_restore_ops()", "tensorflow.train.Checkpoint.restore(converted_path).assert_consumed()", "tensorflow.estimator.Estimator.train()", "tensorflow.compat.v1.disable_v2_behavior()"]