2023-12-08 05:30:45.511695: W tensorflow/core/common_runtime/gpu/gpu_bfc_allocator.cc:39] Overriding allow_growth setting because the TF_FORCE_GPU_ALLOW_GROWTH environment variable is set. Original config value was 0.
[EXECUTION] [05:29:08] Waiting before running function for 10 seconds.
[EXECUTION] [05:29:18] Sensors started
[STABLE CHECK] [05:29:21] Success: temperature is below threshold.
[MAIN] [05:29:21] Terminated sensors
[STABLE CHECK] [05:29:21] Waiting 20 seconds to reach stable state.

[STABLE CHECK] [05:29:41] Success: Machine is stable.
[EXECUTION] [05:29:41] Successfully reached stable state
[EXECUTION] [05:29:41] waiting idle for 30 seconds after function execution
[EXECUTION] [05:30:11] Performed tensorflow.keras.datasets.mnist.load_data() on input and will now save energy data.
[EXECUTION] [05:30:11] skipping call added, current list is: ['tensorflow.data.Dataset.from_tensor_slices((train_images, train_labels)).shuffle(BUFFER_SIZE).batch()', 'tensorflow.data.Dataset.from_tensor_slices((test_images, test_labels)).batch()', 'tensorflow.distribute.MirroredStrategy.experimental_distribute_dataset()', 'tensorflow.keras.losses.SparseCategoricalCrossentropy()', 'tensorflow.keras.metrics.Mean()', 'tensorflow.keras.metrics.SparseCategoricalAccuracy()', 'tensorflow.keras.regularizers.L2()', 'tensorflow.keras.Sequential()', 'tensorflow.keras.optimizers.Adam()', 'tensorflow.train.Checkpoint()', 'tensorflow.nn.compute_average_loss()', 'tensorflow.keras.optimizers.Adam.apply_gradients()', 'tensorflow.keras.metrics.SparseCategoricalAccuracy.update_state()', 'tensorflow.distribute.MirroredStrategy.run()', 'tensorflow.keras.metrics.Mean.update_state()', 'tensorflow.train.Checkpoint.save()', 'tensorflow.keras.metrics.Mean.reset_states()', 'tensorflow.keras.metrics.SparseCategoricalAccuracy.reset_states()', 'tensorflow.train.Checkpoint.restore()', 'tensorflow.keras.datasets.mnist.load_data()']
inside_arg_size
outside_arg_size
inside_kwarg_size
outside_kwarg_size
inside_object_size
outside_object_size
[EXECUTION] [05:30:11] Result: {'tensorflow.keras.datasets.mnist.load_data()': {'energy_data': {'cpu': '{"columns":["time_elapsed",
[EXECUTION] [05:30:11] Data written to file /home/saurabh/method-energy-dataset/dataset/tensorflow_docs/custom_training/experiment-1.json
Data type and shape x_train: float64 (60000, 28, 28, 1)
Data type and shape y_train: uint8 (60000,)
[EXECUTION] [05:30:11] Waiting before running function for 10 seconds.
[EXECUTION] [05:30:21] Sensors started
[STABLE CHECK] [05:30:24] Success: temperature is below threshold.
[MAIN] [05:30:24] Terminated sensors
[STABLE CHECK] [05:30:24] Waiting 20 seconds to reach stable state.

[STABLE CHECK] [05:30:44] Success: Machine is stable.
[EXECUTION] [05:30:44] Successfully reached stable state
[EXECUTION] [05:30:45] waiting idle for 30 seconds after function execution
[EXECUTION] [05:31:16] Performed tensorflow.data.Dataset.from_tensor_slices() on input and will now save energy data.
inside_arg_size
++++++4++++++
++++++4++++++
++++++5++++++
5-size 376320320.0
++++++5++++++
5-size 60128.0
4-size 376380448.0
++++++5++++++
5-size 376320320.0
++++++5++++++
5-size 60128.0
4-size 376380448.0
++++++4++++++
++++++5++++++
5-size 376320320.0
++++++5++++++
5-size 60128.0
4-size 376380448.0
++++++5++++++
5-size 376320320.0
++++++5++++++
5-size 60128.0
outside_arg_size
inside_kwarg_size
outside_kwarg_size
inside_object_size
outside_object_size
[EXECUTION] [05:31:16] Result: {'tensorflow.data.Dataset.from_tensor_slices()': {'energy_data': {'cpu': '{"columns":["time_elapsed"
[EXECUTION] [05:31:16] Data written to file /home/saurabh/method-energy-dataset/dataset/tensorflow_docs/custom_training/experiment-1.json
[EXECUTION] [05:31:16] Waiting before running function for 10 seconds.
[EXECUTION] [05:31:26] Sensors started
[STABLE CHECK] [05:31:29] Success: temperature is below threshold.
[MAIN] [05:31:29] Terminated sensors
[STABLE CHECK] [05:31:29] Waiting 20 seconds to reach stable state.

[STABLE CHECK] [05:31:49] Success: Machine is stable.
[EXECUTION] [05:31:49] Successfully reached stable state
[EXECUTION] [05:31:49] waiting idle for 30 seconds after function execution
[EXECUTION] [05:32:19] Performed tensorflow.data.Dataset.from_tensor_slices.shuffle(buffer_size=1024).batch() on input and will now save energy data.
[EXECUTION] [05:32:19] skipping call added, current list is: ['tensorflow.data.Dataset.from_tensor_slices((train_images, train_labels)).shuffle(BUFFER_SIZE).batch()', 'tensorflow.data.Dataset.from_tensor_slices((test_images, test_labels)).batch()', 'tensorflow.distribute.MirroredStrategy.experimental_distribute_dataset()', 'tensorflow.keras.losses.SparseCategoricalCrossentropy()', 'tensorflow.keras.metrics.Mean()', 'tensorflow.keras.metrics.SparseCategoricalAccuracy()', 'tensorflow.keras.regularizers.L2()', 'tensorflow.keras.Sequential()', 'tensorflow.keras.optimizers.Adam()', 'tensorflow.train.Checkpoint()', 'tensorflow.nn.compute_average_loss()', 'tensorflow.keras.optimizers.Adam.apply_gradients()', 'tensorflow.keras.metrics.SparseCategoricalAccuracy.update_state()', 'tensorflow.distribute.MirroredStrategy.run()', 'tensorflow.keras.metrics.Mean.update_state()', 'tensorflow.train.Checkpoint.save()', 'tensorflow.keras.metrics.Mean.reset_states()', 'tensorflow.keras.metrics.SparseCategoricalAccuracy.reset_states()', 'tensorflow.train.Checkpoint.restore()', 'tensorflow.keras.datasets.mnist.load_data()', 'tensorflow.data.Dataset.from_tensor_slices.shuffle(buffer_size=1024).batch()']
inside_arg_size
++++++4++++++
++++++5++++++
5-size 32.0
4-size 32.0
++++++5++++++
5-size 32.0
outside_arg_size
inside_kwarg_size
outside_kwarg_size
inside_object_size
++++++5++++++
5-size 23672.0
outside_object_size
[EXECUTION] [05:32:19] Result: {'tensorflow.data.Dataset.from_tensor_slices.shuffle(buffer_size=1024).batch()': {'energy_data': {'c
[EXECUTION] [05:32:19] Data written to file /home/saurabh/method-energy-dataset/dataset/tensorflow_docs/custom_training/experiment-1.json
[EXECUTION] [05:32:19] Waiting before running function for 10 seconds.
[EXECUTION] [05:32:29] Sensors started
[STABLE CHECK] [05:32:32] Success: temperature is below threshold.
[MAIN] [05:32:32] Terminated sensors
[STABLE CHECK] [05:32:32] Waiting 20 seconds to reach stable state.

[STABLE CHECK] [05:32:52] Success: Machine is stable.
[EXECUTION] [05:32:52] Successfully reached stable state
[EXECUTION] [05:32:52] waiting idle for 30 seconds after function execution
[EXECUTION] [05:33:22] Performed tensorflow.data.Dataset.from_tensor_slices() on input and will now save energy data.
[EXECUTION] [05:33:22] skipping call added, current list is: ['tensorflow.data.Dataset.from_tensor_slices((train_images, train_labels)).shuffle(BUFFER_SIZE).batch()', 'tensorflow.data.Dataset.from_tensor_slices((test_images, test_labels)).batch()', 'tensorflow.distribute.MirroredStrategy.experimental_distribute_dataset()', 'tensorflow.keras.losses.SparseCategoricalCrossentropy()', 'tensorflow.keras.metrics.Mean()', 'tensorflow.keras.metrics.SparseCategoricalAccuracy()', 'tensorflow.keras.regularizers.L2()', 'tensorflow.keras.Sequential()', 'tensorflow.keras.optimizers.Adam()', 'tensorflow.train.Checkpoint()', 'tensorflow.nn.compute_average_loss()', 'tensorflow.keras.optimizers.Adam.apply_gradients()', 'tensorflow.keras.metrics.SparseCategoricalAccuracy.update_state()', 'tensorflow.distribute.MirroredStrategy.run()', 'tensorflow.keras.metrics.Mean.update_state()', 'tensorflow.train.Checkpoint.save()', 'tensorflow.keras.metrics.Mean.reset_states()', 'tensorflow.keras.metrics.SparseCategoricalAccuracy.reset_states()', 'tensorflow.train.Checkpoint.restore()', 'tensorflow.keras.datasets.mnist.load_data()', 'tensorflow.data.Dataset.from_tensor_slices.shuffle(buffer_size=1024).batch()', 'tensorflow.data.Dataset.from_tensor_slices()']
inside_arg_size
++++++4++++++
++++++4++++++
++++++5++++++
5-size 62720320.0
++++++5++++++
5-size 10128.0
4-size 62730448.0
++++++5++++++
5-size 62720320.0
++++++5++++++
5-size 10128.0
4-size 62730448.0
++++++4++++++
++++++5++++++
5-size 62720320.0
++++++5++++++
5-size 10128.0
4-size 62730448.0
++++++5++++++
5-size 62720320.0
++++++5++++++
5-size 10128.0
outside_arg_size
inside_kwarg_size
outside_kwarg_size
inside_object_size
outside_object_size
[EXECUTION] [05:33:22] Result: {'tensorflow.data.Dataset.from_tensor_slices()': {'energy_data': {'cpu': '{"columns":["time_elapsed"
[EXECUTION] [05:33:22] Data written to file /home/saurabh/method-energy-dataset/dataset/tensorflow_docs/custom_training/experiment-1.json
[EXECUTION] [05:33:22] Waiting before running function for 10 seconds.
[EXECUTION] [05:33:32] Sensors started
[STABLE CHECK] [05:33:35] Success: temperature is below threshold.
[MAIN] [05:33:35] Terminated sensors
[STABLE CHECK] [05:33:35] Waiting 20 seconds to reach stable state.

[STABLE CHECK] [05:33:55] Not stable: stdev/mean is 0.07092588265333127, which is greater than 0.03
[STABLE CHECK] [05:33:55] Machine is not stable yet.
[STABLE CHECK] [05:33:55] Waiting 20 seconds to reach stable state.

[STABLE CHECK] [05:34:15] Success: Machine is stable.
[EXECUTION] [05:34:15] Successfully reached stable state
[EXECUTION] [05:34:15] waiting idle for 30 seconds after function execution
[EXECUTION] [05:34:45] Performed tensorflow.data.Dataset.from_tensor_slices.batch() on input and will now save energy data.
[EXECUTION] [05:34:45] skipping call added, current list is: ['tensorflow.data.Dataset.from_tensor_slices((train_images, train_labels)).shuffle(BUFFER_SIZE).batch()', 'tensorflow.data.Dataset.from_tensor_slices((test_images, test_labels)).batch()', 'tensorflow.distribute.MirroredStrategy.experimental_distribute_dataset()', 'tensorflow.keras.losses.SparseCategoricalCrossentropy()', 'tensorflow.keras.metrics.Mean()', 'tensorflow.keras.metrics.SparseCategoricalAccuracy()', 'tensorflow.keras.regularizers.L2()', 'tensorflow.keras.Sequential()', 'tensorflow.keras.optimizers.Adam()', 'tensorflow.train.Checkpoint()', 'tensorflow.nn.compute_average_loss()', 'tensorflow.keras.optimizers.Adam.apply_gradients()', 'tensorflow.keras.metrics.SparseCategoricalAccuracy.update_state()', 'tensorflow.distribute.MirroredStrategy.run()', 'tensorflow.keras.metrics.Mean.update_state()', 'tensorflow.train.Checkpoint.save()', 'tensorflow.keras.metrics.Mean.reset_states()', 'tensorflow.keras.metrics.SparseCategoricalAccuracy.reset_states()', 'tensorflow.train.Checkpoint.restore()', 'tensorflow.keras.datasets.mnist.load_data()', 'tensorflow.data.Dataset.from_tensor_slices.shuffle(buffer_size=1024).batch()', 'tensorflow.data.Dataset.from_tensor_slices()', 'tensorflow.data.Dataset.from_tensor_slices.batch()']
inside_arg_size
++++++4++++++
++++++5++++++
5-size 32.0
4-size 32.0
++++++5++++++
5-size 32.0
outside_arg_size
inside_kwarg_size
outside_kwarg_size
inside_object_size
++++++5++++++
5-size 19288.0
outside_object_size
[EXECUTION] [05:34:45] Result: {'tensorflow.data.Dataset.from_tensor_slices.batch()': {'energy_data': {'cpu': '{"columns":["time_el
[EXECUTION] [05:34:45] Data written to file /home/saurabh/method-energy-dataset/dataset/tensorflow_docs/custom_training/experiment-1.json
[EXECUTION] [05:34:45] Waiting before running function for 10 seconds.
[EXECUTION] [05:34:56] Sensors started
[STABLE CHECK] [05:34:59] Success: temperature is below threshold.
[MAIN] [05:34:59] Terminated sensors
[STABLE CHECK] [05:34:59] Waiting 20 seconds to reach stable state.

[STABLE CHECK] [05:35:19] Success: Machine is stable.
[EXECUTION] [05:35:19] Successfully reached stable state
[EXECUTION] [05:35:19] waiting idle for 30 seconds after function execution
[EXECUTION] [05:35:49] Performed tensorflow.keras.metrics.Accuracy() on input and will now save energy data.
[EXECUTION] [05:35:49] skipping call added, current list is: ['tensorflow.data.Dataset.from_tensor_slices((train_images, train_labels)).shuffle(BUFFER_SIZE).batch()', 'tensorflow.data.Dataset.from_tensor_slices((test_images, test_labels)).batch()', 'tensorflow.distribute.MirroredStrategy.experimental_distribute_dataset()', 'tensorflow.keras.losses.SparseCategoricalCrossentropy()', 'tensorflow.keras.metrics.Mean()', 'tensorflow.keras.metrics.SparseCategoricalAccuracy()', 'tensorflow.keras.regularizers.L2()', 'tensorflow.keras.Sequential()', 'tensorflow.keras.optimizers.Adam()', 'tensorflow.train.Checkpoint()', 'tensorflow.nn.compute_average_loss()', 'tensorflow.keras.optimizers.Adam.apply_gradients()', 'tensorflow.keras.metrics.SparseCategoricalAccuracy.update_state()', 'tensorflow.distribute.MirroredStrategy.run()', 'tensorflow.keras.metrics.Mean.update_state()', 'tensorflow.train.Checkpoint.save()', 'tensorflow.keras.metrics.Mean.reset_states()', 'tensorflow.keras.metrics.SparseCategoricalAccuracy.reset_states()', 'tensorflow.train.Checkpoint.restore()', 'tensorflow.keras.datasets.mnist.load_data()', 'tensorflow.data.Dataset.from_tensor_slices.shuffle(buffer_size=1024).batch()', 'tensorflow.data.Dataset.from_tensor_slices()', 'tensorflow.data.Dataset.from_tensor_slices.batch()', 'tensorflow.keras.metrics.Accuracy()']
inside_arg_size
outside_arg_size
inside_kwarg_size
outside_kwarg_size
inside_object_size
outside_object_size
[EXECUTION] [05:35:49] Result: {'tensorflow.keras.metrics.Accuracy()': {'energy_data': {'cpu': '{"columns":["time_elapsed","energy 
[EXECUTION] [05:35:49] Data written to file /home/saurabh/method-energy-dataset/dataset/tensorflow_docs/custom_training/experiment-1.json
[EXECUTION] [05:35:50] Waiting before running function for 10 seconds.
[EXECUTION] [05:36:01] Sensors started
[STABLE CHECK] [05:36:04] Temperature too high: mean is 40.8, which is greater than 40
[STABLE CHECK] [05:36:04] Temperature is too high.
[STABLE CHECK] [05:36:04] Waiting 20 seconds to reach low temperature.

[STABLE CHECK] [05:36:24] Success: temperature is below threshold.
[MAIN] [05:36:24] Terminated sensors
[STABLE CHECK] [05:36:24] Waiting 20 seconds to reach stable state.

[STABLE CHECK] [05:36:44] Success: Machine is stable.
[EXECUTION] [05:36:44] Successfully reached stable state
[EXECUTION] [05:36:44] waiting idle for 30 seconds after function execution
[EXECUTION] [05:37:14] Performed tensorflow.argmax() on input and will now save energy data.
[EXECUTION] [05:37:14] skipping call added, current list is: ['tensorflow.data.Dataset.from_tensor_slices((train_images, train_labels)).shuffle(BUFFER_SIZE).batch()', 'tensorflow.data.Dataset.from_tensor_slices((test_images, test_labels)).batch()', 'tensorflow.distribute.MirroredStrategy.experimental_distribute_dataset()', 'tensorflow.keras.losses.SparseCategoricalCrossentropy()', 'tensorflow.keras.metrics.Mean()', 'tensorflow.keras.metrics.SparseCategoricalAccuracy()', 'tensorflow.keras.regularizers.L2()', 'tensorflow.keras.Sequential()', 'tensorflow.keras.optimizers.Adam()', 'tensorflow.train.Checkpoint()', 'tensorflow.nn.compute_average_loss()', 'tensorflow.keras.optimizers.Adam.apply_gradients()', 'tensorflow.keras.metrics.SparseCategoricalAccuracy.update_state()', 'tensorflow.distribute.MirroredStrategy.run()', 'tensorflow.keras.metrics.Mean.update_state()', 'tensorflow.train.Checkpoint.save()', 'tensorflow.keras.metrics.Mean.reset_states()', 'tensorflow.keras.metrics.SparseCategoricalAccuracy.reset_states()', 'tensorflow.train.Checkpoint.restore()', 'tensorflow.keras.datasets.mnist.load_data()', 'tensorflow.data.Dataset.from_tensor_slices.shuffle(buffer_size=1024).batch()', 'tensorflow.data.Dataset.from_tensor_slices()', 'tensorflow.data.Dataset.from_tensor_slices.batch()', 'tensorflow.keras.metrics.Accuracy()', 'tensorflow.argmax()']
inside_arg_size
++++++4++++++
++++++1++++++
1-size 1280.0
4-size 1280.0
++++++1++++++
1-size 1280.0
outside_arg_size
inside_kwarg_size
++++++4++++++
++++++5++++++
5-size 56.0
++++++5++++++
5-size 64.0
4-size 120.0
++++++5++++++
5-size 56.0
++++++5++++++
5-size 64.0
outside_kwarg_size
inside_object_size
outside_object_size
[EXECUTION] [05:37:14] Result: {'tensorflow.argmax()': {'energy_data': {'cpu': '{"columns":["time_elapsed","energy (J)"],"index":[0
[EXECUTION] [05:37:14] Data written to file /home/saurabh/method-energy-dataset/dataset/tensorflow_docs/custom_training/experiment-1.json
Epoch 1: Loss: 0.1321 Accuracy: 93.41%
Epoch 2: Loss: 0.0799 Accuracy: 96.61%
Epoch 3: Loss: 0.0684 Accuracy: 97.11%
Epoch 4: Loss: 0.0629 Accuracy: 97.42%
Epoch 5: Loss: 0.0613 Accuracy: 97.57%
Test accuracy: 97.589%
