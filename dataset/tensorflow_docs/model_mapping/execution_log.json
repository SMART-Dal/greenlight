WARNING:tensorflow:From /home/saurabh/method-energy-dataset/projects/tensorflow_docs_patched/site/en/guide/migrate/model_mapping_method-level.py:21: The name tf.keras.utils.track_tf1_style_variables is deprecated. Please use tf.compat.v1.keras.utils.track_tf1_style_variables instead.

2023-12-09 05:16:09.939495: W tensorflow/core/common_runtime/gpu/gpu_bfc_allocator.cc:39] Overriding allow_growth setting because the TF_FORCE_GPU_ALLOW_GROWTH environment variable is set. Original config value was 0.
2023-12-09 05:16:10.635073: W tensorflow/python/util/util.cc:368] Sets are not currently considered sequences, but this may change in the future, so consider avoiding using them.
/home/saurabh/method-energy-dataset/projects/tensorflow_docs_patched/site/en/guide/migrate/model_mapping_method-level.py:83: UserWarning: `tf.layers.conv2d` is deprecated and will be removed in a future version. Please Use `tf.keras.layers.Conv2D` instead.
  out = tf.compat.v1.layers.conv2d(inputs, 3, 3, kernel_regularizer='l2')
/home/saurabh/miniconda3/envs/tf2/lib/python3.9/site-packages/keras/legacy_tf_layers/convolutional.py:563: UserWarning: `layer.apply` is deprecated and will be removed in a future version. Please use `layer.__call__` method instead.
  return layer.apply(inputs)
/home/saurabh/method-energy-dataset/projects/tensorflow_docs_patched/site/en/guide/migrate/model_mapping_method-level.py:86: UserWarning: `tf.layers.flatten` is deprecated and will be removed in a future version. Please use `tf.keras.layers.Flatten` instead.
  out = tf.compat.v1.layers.flatten(out)
/home/saurabh/miniconda3/envs/tf2/lib/python3.9/site-packages/keras/legacy_tf_layers/core.py:523: UserWarning: `layer.apply` is deprecated and will be removed in a future version. Please use `layer.__call__` method instead.
  return layer.apply(inputs)
/home/saurabh/method-energy-dataset/projects/tensorflow_docs_patched/site/en/guide/migrate/model_mapping_method-level.py:89: UserWarning: `tf.layers.dense` is deprecated and will be removed in a future version. Please use `tf.keras.layers.Dense` instead.
  out = tf.compat.v1.layers.dense(out, self.units, kernel_regularizer='l2')
/home/saurabh/miniconda3/envs/tf2/lib/python3.9/site-packages/keras/legacy_tf_layers/core.py:255: UserWarning: `layer.apply` is deprecated and will be removed in a future version. Please use `layer.__call__` method instead.
  return layer.apply(inputs)
/home/saurabh/miniconda3/envs/tf2/lib/python3.9/site-packages/keras/legacy_tf_layers/base.py:573: UserWarning: `layer.updates` will be removed in a future version. This property should not be used in TensorFlow 2.0, as `updates` are applied automatically.
  _add_elements_to_collection(self.updates, tf.compat.v1.GraphKeys.UPDATE_OPS)
/home/saurabh/method-energy-dataset/projects/tensorflow_docs_patched/site/en/guide/migrate/model_mapping_method-level.py:131: UserWarning: `tf.layers.batch_normalization` is deprecated and will be removed in a future version. Please use `tf.keras.layers.BatchNormalization` instead. In particular, `tf.control_dependencies(tf.GraphKeys.UPDATE_OPS)` should not be used (consult the `tf.keras.layers.BatchNormalization` documentation).
  return v1.layers.batch_normalization(x, training=training)
/home/saurabh/miniconda3/envs/tf2/lib/python3.9/site-packages/keras/legacy_tf_layers/normalization.py:455: UserWarning: `layer.apply` is deprecated and will be removed in a future version. Please use `layer.__call__` method instead.
  return layer.apply(inputs, training=training)
Resetting variables to zero: ['dense/bias:0', 'dense/kernel:0']
layer.losses: [<tf.Tensor: shape=(), dtype=float32, numpy=0.0>]
calling layer again.
layer.losses:  [<tf.Tensor: shape=(), dtype=float32, numpy=0.0>]
Resetting variables to zero: ['model/conv2d/bias:0', 'model/conv2d/kernel:0', 'model/dense/bias:0', 'model/dense/kernel:0']
layer.losses:  [<tf.Tensor: shape=(), dtype=float32, numpy=0.0>, <tf.Tensor: shape=(), dtype=float32, numpy=0.0>]
Constructing model
Forward pass called with `training` = None
Calling model in inference mode
Forward pass called with `training` = False
Moving average variables before training:  {'batch_norm_layer/batch_normalization/moving_mean:0': <tf.Tensor: shape=(5,), dtype=float32, numpy=array([0., 0., 0., 0., 0.], dtype=float32)>, 'batch_norm_layer/batch_normalization/moving_variance:0': <tf.Tensor: shape=(5,), dtype=float32, numpy=array([1., 1., 1., 1., 1.], dtype=float32)>}
calling model in training mode
Forward pass called with `training` = True
Moving average variables after training:  {'batch_norm_layer/batch_normalization/moving_mean:0': <tf.Tensor: shape=(5,), dtype=float32, numpy=
array([-1.2042862e-03,  1.8463234e-04, -4.2234501e-04,  8.7444416e-05,
        1.3356501e-03], dtype=float32)>, 'batch_norm_layer/batch_normalization/moving_variance:0': <tf.Tensor: shape=(5,), dtype=float32, numpy=
array([0.99810773, 1.0015012 , 1.0008069 , 0.99839836, 0.9999615 ],
      dtype=float32)>}
[EXECUTION] [05:16:11] Waiting before running function for 10 seconds.
[EXECUTION] [05:16:21] Sensors started
[STABLE CHECK] [05:16:24] Temperature too high: mean is 40.95, which is greater than 40
[STABLE CHECK] [05:16:24] Temperature is too high.
[STABLE CHECK] [05:16:24] Waiting 20 seconds to reach low temperature.

[STABLE CHECK] [05:16:44] Success: temperature is below threshold.
[MAIN] [05:16:44] Terminated sensors
[STABLE CHECK] [05:16:44] Waiting 20 seconds to reach stable state.

[STABLE CHECK] [05:17:04] Success: Machine is stable.
[EXECUTION] [05:17:04] Successfully reached stable state
Traceback (most recent call last):
  File "/home/saurabh/method-energy-dataset/projects/tensorflow_docs_patched/site/en/guide/migrate/model_mapping_method-level.py", line 180, in <module>
    layer(tf.ones(shape=(5, 5)))
  File "/home/saurabh/miniconda3/envs/tf2/lib/python3.9/site-packages/keras/utils/traceback_utils.py", line 67, in error_handler
    raise e.with_traceback(filtered_tb) from None
  File "/home/saurabh/method-energy-dataset/projects/tensorflow_docs_patched/site/en/guide/migrate/model_mapping_method-level.py", line 175, in call
    model = tf.compat.v1.keras.utils.get_or_create_layer('dense_model', self.build_model)
AttributeError: Exception encountered when calling layer "nested_model" (type NestedModel).

module 'keras.api._v1.keras.utils' has no attribute 'get_or_create_layer'

Call arguments received:
  â€¢ inputs=tf.Tensor(shape=(5, 5), dtype=float32)
