2023-12-09 02:30:03.651520: W tensorflow/core/common_runtime/gpu/gpu_bfc_allocator.cc:39] Overriding allow_growth setting because the TF_FORCE_GPU_ALLOW_GROWTH environment variable is set. Original config value was 0.
WARNING:tensorflow:Some requested devices in `tf.distribute.Strategy` are not visible to TensorFlow: /job:localhost/replica:0/task:0/device:GPU:1,/job:localhost/replica:0/task:0/device:GPU:0
WARNING:tensorflow:Collective ops is not configured at program startup. Some performance features may not be enabled.
WARNING:tensorflow:Collective ops is not configured at program startup. Some performance features may not be enabled.
2023-12-09 02:30:03.742972: W tensorflow/core/grappler/optimizers/data/auto_shard.cc:766] AUTO sharding policy will apply DATA sharding policy as it failed to apply FILE sharding policy because of the following reason: Found an unshardable source dataset: name: "TensorDataset/_2"
op: "TensorDataset"
input: "Placeholder/_0"
input: "Placeholder/_1"
attr {
  key: "Toutput_types"
  value {
    list {
      type: DT_FLOAT
      type: DT_FLOAT
    }
  }
}
attr {
  key: "_cardinality"
  value {
    i: 1
  }
}
attr {
  key: "metadata"
  value {
    s: "\n\017TensorDataset:0"
  }
}
attr {
  key: "output_shapes"
  value {
    list {
      shape {
        dim {
          size: 1
        }
      }
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}

MirroredVariable:{
  0: <tf.Variable 'Variable:0' shape=() dtype=float32, numpy=1.0>
}
Epoch 1/2

 1/10 [==>...........................] - ETA: 9s - loss: 1.2966
10/10 [==============================] - 1s 6ms/step - loss: 0.9228
Epoch 2/2

 1/10 [==>...........................] - ETA: 0s - loss: 0.5731
10/10 [==============================] - 0s 3ms/step - loss: 0.4079
2023-12-09 02:30:58.270547: W tensorflow/core/grappler/optimizers/data/auto_shard.cc:766] AUTO sharding policy will apply DATA sharding policy as it failed to apply FILE sharding policy because of the following reason: Found an unshardable source dataset: name: "TensorDataset/_2"
op: "TensorDataset"
input: "Placeholder/_0"
input: "Placeholder/_1"
attr {
  key: "Toutput_types"
  value {
    list {
      type: DT_FLOAT
      type: DT_FLOAT
    }
  }
}
attr {
  key: "_cardinality"
  value {
    i: 1
  }
}
attr {
  key: "metadata"
  value {
    s: "\n\017TensorDataset:0"
  }
}
attr {
  key: "output_shapes"
  value {
    list {
      shape {
        dim {
          size: 1
        }
      }
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}

[EXECUTION] [02:30:05] Waiting before running function for 10 seconds.
[EXECUTION] [02:30:15] Sensors started
[STABLE CHECK] [02:30:18] Temperature too high: mean is 42, which is greater than 40
[STABLE CHECK] [02:30:18] Temperature is too high.
[STABLE CHECK] [02:30:18] Waiting 20 seconds to reach low temperature.

[STABLE CHECK] [02:30:38] Success: temperature is below threshold.
[MAIN] [02:30:38] Terminated sensors
[STABLE CHECK] [02:30:38] Waiting 20 seconds to reach stable state.

[STABLE CHECK] [02:30:58] Success: Machine is stable.
[EXECUTION] [02:30:58] Successfully reached stable state

 1/10 [==>...........................] - ETA: 2s - loss: 0.2533
10/10 [==============================] - 0s 4ms/step - loss: 0.2533
2023-12-09 02:31:28.800629: W tensorflow/core/grappler/optimizers/data/auto_shard.cc:766] AUTO sharding policy will apply DATA sharding policy as it failed to apply FILE sharding policy because of the following reason: Did not find a shardable source, walked to a node which is not a dataset: name: "FlatMapDataset/_9"
op: "FlatMapDataset"
input: "PrefetchDataset/_8"
attr {
  key: "Targuments"
  value {
    list {
    }
  }
}
attr {
  key: "_cardinality"
  value {
    i: -2
  }
}
attr {
  key: "f"
  value {
    func {
      name: "__inference_Dataset_flat_map_slice_batch_indices_1170"
    }
  }
}
attr {
  key: "metadata"
  value {
    s: "\n\021FlatMapDataset:44"
  }
}
attr {
  key: "output_shapes"
  value {
    list {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
}
attr {
  key: "output_types"
  value {
    list {
      type: DT_INT64
    }
  }
}
. Consider either turning off auto-sharding or switching the auto_shard_policy to DATA to shard this dataset. You can do this by creating a new `tf.data.Options()` object then setting `options.experimental_distribute.auto_shard_policy = AutoShardPolicy.DATA` before applying the options object to the dataset via `dataset.with_options(options)`.
[EXECUTION] [02:30:58] waiting idle for 30 seconds after function execution
[EXECUTION] [02:31:28] Performed tensorflow.keras.Sequential.evaluate() on input and will now save energy data.
[EXECUTION] [02:31:28] skipping call added, current list is: ['tensorflow.distribute.MirroredStrategy()', 'tensorflow.distribute.MultiWorkerMirroredStrategy()', 'tensorflow.distribute.experimental.CommunicationOptions()', 'tensorflow.distribute.experimental.CentralStorageStrategy()', 'tensorflow.distribute.get_strategy()', 'tensorflow.distribute.get_strategy.reduce()', 'tensorflow.keras.Sequential()', 'tensorflow.keras.Sequential.compile()', 'tensorflow.data.Dataset.from_tensors(([1.0], [1.0])).repeat(100).batch()', 'tensorflow.data.Dataset.from_tensors(([1.0], [1.0])).repeat()', 'tensorflow.data.Dataset.from_tensors(([1.], [1.])).repeat.batch()', 'tensorflow.keras.optimizers.SGD()', 'tensorflow.data.Dataset.from_tensors(([1.0], [1.0])).repeat(1000).batch()', 'tensorflow.distribute.MirroredStrategy.experimental_distribute_dataset()', 'tensorflow.keras.losses.BinaryCrossentropy()', 'tensorflow.nn.compute_average_loss()', 'tensorflow.keras.optimizers.SGD.apply_gradients()', 'tensorflow.distribute.MirroredStrategy.run()', 'tensorflow.keras.Sequential.fit()', 'tensorflow.keras.Sequential.evaluate()']
inside_arg_size
++++++4++++++
++++++5++++++
5-size 26696.0
4-size 26696.0
++++++5++++++
5-size 26696.0
outside_arg_size
inside_kwarg_size
outside_kwarg_size
inside_object_size
++++++5++++++
5-size 1188336.0
outside_object_size
[EXECUTION] [02:31:28] Result: {'tensorflow.keras.Sequential.evaluate()': {'energy_data': {'cpu': '{"columns":["time_elapsed","ener
[EXECUTION] [02:31:28] Data written to file /home/saurabh/method-energy-dataset/dataset/tensorflow_docs/distributed_training/experiment-5.json
Epoch 1/2

 1/10 [==>...........................] - ETA: 1s - loss: 0.2533
10/10 [==============================] - 0s 3ms/step - loss: 0.1803
Epoch 2/2

 1/10 [==>...........................] - ETA: 0s - loss: 0.1120
10/10 [==============================] - 0s 3ms/step - loss: 0.0797
2023-12-09 02:31:29.062920: W tensorflow/core/grappler/optimizers/data/auto_shard.cc:766] AUTO sharding policy will apply DATA sharding policy as it failed to apply FILE sharding policy because of the following reason: Found an unshardable source dataset: name: "TensorDataset/_2"
op: "TensorDataset"
input: "Placeholder/_0"
input: "Placeholder/_1"
attr {
  key: "Toutput_types"
  value {
    list {
      type: DT_FLOAT
      type: DT_FLOAT
    }
  }
}
attr {
  key: "_cardinality"
  value {
    i: 1
  }
}
attr {
  key: "metadata"
  value {
    s: "\n\020TensorDataset:65"
  }
}
attr {
  key: "output_shapes"
  value {
    list {
      shape {
        dim {
          size: 1
        }
      }
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}

tf.Tensor(1.2831749, shape=(), dtype=float32)
tf.Tensor(1.2727439, shape=(), dtype=float32)
tf.Tensor(1.2623966, shape=(), dtype=float32)
tf.Tensor(1.2521329, shape=(), dtype=float32)
tf.Tensor(1.241953, shape=(), dtype=float32)
tf.Tensor(1.2318565, shape=(), dtype=float32)
tf.Tensor(1.2218429, shape=(), dtype=float32)
tf.Tensor(1.2119123, shape=(), dtype=float32)
tf.Tensor(1.2020646, shape=(), dtype=float32)
tf.Tensor(1.1922996, shape=(), dtype=float32)
tf.Tensor(1.1826167, shape=(), dtype=float32)
tf.Tensor(1.1730157, shape=(), dtype=float32)
tf.Tensor(1.1634969, shape=(), dtype=float32)
tf.Tensor(1.1540592, shape=(), dtype=float32)
tf.Tensor(1.1447029, shape=(), dtype=float32)
tf.Tensor(1.1354277, shape=(), dtype=float32)
tf.Tensor(1.1262331, shape=(), dtype=float32)
tf.Tensor(1.1171187, shape=(), dtype=float32)
tf.Tensor(1.1080844, shape=(), dtype=float32)
tf.Tensor(1.0991299, shape=(), dtype=float32)
tf.Tensor(1.0902544, shape=(), dtype=float32)
tf.Tensor(1.0814582, shape=(), dtype=float32)
tf.Tensor(1.0727406, shape=(), dtype=float32)
tf.Tensor(1.0641011, shape=(), dtype=float32)
tf.Tensor(1.0555395, shape=(), dtype=float32)
tf.Tensor(1.0470552, shape=(), dtype=float32)
tf.Tensor(1.0386482, shape=(), dtype=float32)
tf.Tensor(1.0303179, shape=(), dtype=float32)
tf.Tensor(1.0220639, shape=(), dtype=float32)
tf.Tensor(1.0138855, shape=(), dtype=float32)
tf.Tensor(1.0057826, shape=(), dtype=float32)
tf.Tensor(0.9977546, shape=(), dtype=float32)
tf.Tensor(0.9898011, shape=(), dtype=float32)
tf.Tensor(0.9819218, shape=(), dtype=float32)
tf.Tensor(0.974116, shape=(), dtype=float32)
tf.Tensor(0.9663836, shape=(), dtype=float32)
tf.Tensor(0.9587236, shape=(), dtype=float32)
tf.Tensor(0.951136, shape=(), dtype=float32)
tf.Tensor(0.9436202, shape=(), dtype=float32)
tf.Tensor(0.93617547, shape=(), dtype=float32)
tf.Tensor(0.9288016, shape=(), dtype=float32)
tf.Tensor(0.9214981, shape=(), dtype=float32)
tf.Tensor(0.9142643, shape=(), dtype=float32)
tf.Tensor(0.90709984, shape=(), dtype=float32)
tf.Tensor(0.9000042, shape=(), dtype=float32)
tf.Tensor(0.89297676, shape=(), dtype=float32)
tf.Tensor(0.88601714, shape=(), dtype=float32)
tf.Tensor(0.8791248, shape=(), dtype=float32)
tf.Tensor(0.87229925, shape=(), dtype=float32)
tf.Tensor(0.86553997, shape=(), dtype=float32)
tf.Tensor(0.8588463, shape=(), dtype=float32)
tf.Tensor(0.8522179, shape=(), dtype=float32)
tf.Tensor(0.8456542, shape=(), dtype=float32)
tf.Tensor(0.8391546, shape=(), dtype=float32)
tf.Tensor(0.83271873, shape=(), dtype=float32)
tf.Tensor(0.82634586, shape=(), dtype=float32)
tf.Tensor(0.8200356, shape=(), dtype=float32)
tf.Tensor(0.81378734, shape=(), dtype=float32)
tf.Tensor(0.8076007, shape=(), dtype=float32)
tf.Tensor(0.80147505, shape=(), dtype=float32)
tf.Tensor(0.7954097, shape=(), dtype=float32)
tf.Tensor(0.7894042, shape=(), dtype=float32)
tf.Tensor(0.7834583, shape=(), dtype=float32)
tf.Tensor(0.77757126, shape=(), dtype=float32)
tf.Tensor(0.7717426, shape=(), dtype=float32)
tf.Tensor(0.7659716, shape=(), dtype=float32)
tf.Tensor(0.76025796, shape=(), dtype=float32)
tf.Tensor(0.75460106, shape=(), dtype=float32)
tf.Tensor(0.74900043, shape=(), dtype=float32)
tf.Tensor(0.7434554, shape=(), dtype=float32)
tf.Tensor(0.7379657, shape=(), dtype=float32)
tf.Tensor(0.73253065, shape=(), dtype=float32)
tf.Tensor(0.7271496, shape=(), dtype=float32)
tf.Tensor(0.7218222, shape=(), dtype=float32)
tf.Tensor(0.7165479, shape=(), dtype=float32)
tf.Tensor(0.71132636, shape=(), dtype=float32)
tf.Tensor(0.70615673, shape=(), dtype=float32)
tf.Tensor(0.7010387, shape=(), dtype=float32)
tf.Tensor(0.6959718, shape=(), dtype=float32)
tf.Tensor(0.69095546, shape=(), dtype=float32)
tf.Tensor(0.685989, shape=(), dtype=float32)
tf.Tensor(0.6810722, shape=(), dtype=float32)
tf.Tensor(0.6762045, shape=(), dtype=float32)
tf.Tensor(0.6713852, shape=(), dtype=float32)
tf.Tensor(0.66661406, shape=(), dtype=float32)
tf.Tensor(0.6618905, shape=(), dtype=float32)
tf.Tensor(0.657214, shape=(), dtype=float32)
tf.Tensor(0.6525841, shape=(), dtype=float32)
tf.Tensor(0.6480003, shape=(), dtype=float32)
tf.Tensor(0.64346224, shape=(), dtype=float32)
tf.Tensor(0.63896924, shape=(), dtype=float32)
tf.Tensor(0.63452095, shape=(), dtype=float32)
tf.Tensor(0.63011694, shape=(), dtype=float32)
tf.Tensor(0.62575656, shape=(), dtype=float32)
tf.Tensor(0.6214396, shape=(), dtype=float32)
tf.Tensor(0.6171655, shape=(), dtype=float32)
tf.Tensor(0.61293364, shape=(), dtype=float32)
tf.Tensor(0.60874385, shape=(), dtype=float32)
tf.Tensor(0.6045955, shape=(), dtype=float32)
tf.Tensor(0.6004882, shape=(), dtype=float32)
tf.Tensor(0.5964215, shape=(), dtype=float32)
tf.Tensor(0.59239495, shape=(), dtype=float32)
tf.Tensor(0.5884082, shape=(), dtype=float32)
tf.Tensor(0.5844606, shape=(), dtype=float32)
tf.Tensor(0.580552, shape=(), dtype=float32)
tf.Tensor(0.5766818, shape=(), dtype=float32)
tf.Tensor(0.57284963, shape=(), dtype=float32)
tf.Tensor(0.56905514, shape=(), dtype=float32)
tf.Tensor(0.56529784, shape=(), dtype=float32)
tf.Tensor(0.5615773, shape=(), dtype=float32)
tf.Tensor(0.5578932, shape=(), dtype=float32)
tf.Tensor(0.5542451, shape=(), dtype=float32)
tf.Tensor(0.5506326, shape=(), dtype=float32)
tf.Tensor(0.5470553, shape=(), dtype=float32)
tf.Tensor(0.5435128, shape=(), dtype=float32)
tf.Tensor(0.54000485, shape=(), dtype=float32)
tf.Tensor(0.53653085, shape=(), dtype=float32)
tf.Tensor(0.53309053, shape=(), dtype=float32)
tf.Tensor(0.52968353, shape=(), dtype=float32)
tf.Tensor(0.52630943, shape=(), dtype=float32)
tf.Tensor(0.52296793, shape=(), dtype=float32)
tf.Tensor(0.5196587, shape=(), dtype=float32)
tf.Tensor(0.5163812, shape=(), dtype=float32)
tf.Tensor(0.5131352, shape=(), dtype=float32)
tf.Tensor(0.50992036, shape=(), dtype=float32)
tf.Tensor(0.5067364, shape=(), dtype=float32)
tf.Tensor(0.5035829, shape=(), dtype=float32)
tf.Tensor(0.5004594, shape=(), dtype=float32)
tf.Tensor(0.49736562, shape=(), dtype=float32)
tf.Tensor(0.4943014, shape=(), dtype=float32)
tf.Tensor(0.49126628, shape=(), dtype=float32)
tf.Tensor(0.48825988, shape=(), dtype=float32)
tf.Tensor(0.485282, shape=(), dtype=float32)
tf.Tensor(0.48233223, shape=(), dtype=float32)
tf.Tensor(0.47941026, shape=(), dtype=float32)
tf.Tensor(0.4765159, shape=(), dtype=float32)
tf.Tensor(0.47364858, shape=(), dtype=float32)
tf.Tensor(0.4708083, shape=(), dtype=float32)
tf.Tensor(0.46799454, shape=(), dtype=float32)
tf.Tensor(0.46520713, shape=(), dtype=float32)
tf.Tensor(0.46244574, shape=(), dtype=float32)
tf.Tensor(0.45970997, shape=(), dtype=float32)
tf.Tensor(0.45699975, shape=(), dtype=float32)
tf.Tensor(0.4543146, shape=(), dtype=float32)
tf.Tensor(0.45165431, shape=(), dtype=float32)
tf.Tensor(0.44901854, shape=(), dtype=float32)
tf.Tensor(0.44640717, shape=(), dtype=float32)
tf.Tensor(0.4438198, shape=(), dtype=float32)
tf.Tensor(0.44125617, shape=(), dtype=float32)
tf.Tensor(0.43871608, shape=(), dtype=float32)
tf.Tensor(0.43619916, shape=(), dtype=float32)
tf.Tensor(0.4337052, shape=(), dtype=float32)
tf.Tensor(0.431234, shape=(), dtype=float32)
tf.Tensor(0.4287853, shape=(), dtype=float32)
tf.Tensor(0.4263588, shape=(), dtype=float32)
tf.Tensor(0.42395425, shape=(), dtype=float32)
tf.Tensor(0.42157137, shape=(), dtype=float32)
tf.Tensor(0.41921, shape=(), dtype=float32)
tf.Tensor(0.41686988, shape=(), dtype=float32)
tf.Tensor(0.41455075, shape=(), dtype=float32)
tf.Tensor(0.4122524, shape=(), dtype=float32)
tf.Tensor(0.40997458, shape=(), dtype=float32)
tf.Tensor(0.40771708, shape=(), dtype=float32)
tf.Tensor(0.4054796, shape=(), dtype=float32)
tf.Tensor(0.40326205, shape=(), dtype=float32)
tf.Tensor(0.40106416, shape=(), dtype=float32)
tf.Tensor(0.3988856, shape=(), dtype=float32)
tf.Tensor(0.39672634, shape=(), dtype=float32)
tf.Tensor(0.39458603, shape=(), dtype=float32)
tf.Tensor(0.3924645, shape=(), dtype=float32)
tf.Tensor(0.39036155, shape=(), dtype=float32)
tf.Tensor(0.38827696, shape=(), dtype=float32)
tf.Tensor(0.3862106, shape=(), dtype=float32)
tf.Tensor(0.38416216, shape=(), dtype=float32)
tf.Tensor(0.38213152, shape=(), dtype=float32)
tf.Tensor(0.38011843, shape=(), dtype=float32)
tf.Tensor(0.37812272, shape=(), dtype=float32)
tf.Tensor(0.37614423, shape=(), dtype=float32)
tf.Tensor(0.3741828, shape=(), dtype=float32)
tf.Tensor(0.3722381, shape=(), dtype=float32)
tf.Tensor(0.37031007, shape=(), dtype=float32)
tf.Tensor(0.36839855, shape=(), dtype=float32)
tf.Tensor(0.36650324, shape=(), dtype=float32)
tf.Tensor(0.3646241, shape=(), dtype=float32)
tf.Tensor(0.36276084, shape=(), dtype=float32)
tf.Tensor(0.3609134, shape=(), dtype=float32)
tf.Tensor(0.3590815, shape=(), dtype=float32)
tf.Tensor(0.357265, shape=(), dtype=float32)
tf.Tensor(0.35546377, shape=(), dtype=float32)
tf.Tensor(0.35367766, shape=(), dtype=float32)
tf.Tensor(0.35190642, shape=(), dtype=float32)
tf.Tensor(0.35015, shape=(), dtype=float32)
tf.Tensor(0.34840813, shape=(), dtype=float32)
tf.Tensor(0.3466807, shape=(), dtype=float32)
tf.Tensor(0.34496757, shape=(), dtype=float32)
tf.Tensor(0.34326863, shape=(), dtype=float32)
tf.Tensor(0.34158364, shape=(), dtype=float32)
tf.Tensor(0.3399125, shape=(), dtype=float32)
tf.Tensor(0.33825508, shape=(), dtype=float32)
tf.Tensor(0.3366112, shape=(), dtype=float32)
tf.Tensor(0.33498073, shape=(), dtype=float32)
tf.Tensor(0.33336353, shape=(), dtype=float32)
tf.Tensor(0.33175945, shape=(), dtype=float32)
tf.Tensor(0.3301683, shape=(), dtype=float32)
tf.Tensor(0.32859007, shape=(), dtype=float32)
tf.Tensor(0.32702452, shape=(), dtype=float32)
tf.Tensor(0.32547155, shape=(), dtype=float32)
tf.Tensor(0.32393107, shape=(), dtype=float32)
tf.Tensor(0.32240283, shape=(), dtype=float32)
tf.Tensor(0.32088682, shape=(), dtype=float32)
